//CS 35L - Professor Eggert
//Lab 4 - TA Isha Verma
//Project 5 - System call programming and debugging
//Laboratory - Buffered versus unbuffered I/O
//lab.txt

- For this lab, I was tasked with implementing two transliteration programs:
  - tr2b => which used buffered I/O via getchar and putchar
  - tr2u => which used unbuffered I/O via syscalls read and write
- Both programs are intended to do what the tr command does, except without tr's options
- These two programs have two parameters just like tr does (in this case from and to), to
  change the from characters to that of the to characters, in addition to a corresponding
  input from STDIN

(1)(2) Both of the implementations are nearly identical, except for in the while loop, 
       where the getchar and putchar calls were replaced with the read and write syscalls
- Moreover, both programs check for three errors:
  1. Check to make sure that the executable is called with the correct number of 
     command-line arguments (i.e. the executable, and the from and to operands)
  2. Check to make sure that from and to are of the same length (via strlen)
  3. Check to make sure that from doesn't have any duplicate bytes

- The from and to operands were stored in two character arrays (from and to, respectively)
- Finally, both programs had a while loop to take care of transliterating the bytes of
  the from operand to that of the to operand via the buffered and unbuffered I/O methods


(3) After creating the two transliteration implementations, the strace command was used
    to compare the system calls issued by the two programs when:
    (a) copying one file to another
    (b) copying a file to the terminal
- The files were made sure to contain at least 5,000,000 bytes as requested
  - To generate such a file, I used the following command:
    $ head --bytes=5M /dev/urandom > large.txt

(a) Copying one file to another:
$ strace -o strace_output1 ./tr2b 'AB' 'XY' < large.txt > output1.txt
$ wc -l strace_output1

- First strace was run for the first program to get the number of system calls, and the
  output was redirected to strace_output1
- The strace_output1 file consisted of all of the system calls issued by tr2b, with one
  printed per line, thus using the word count command, I obtained the number of syscalls,
  which was 31

$ strace -o strace_output2 ./tr2u 'AB' 'XY' < large.txt	> output2.txt
$ wc -l strace_output2

- The same process was done for the tr2u program, and the number of syscalls was found
  to be 10485786

- The reason that the unbuffered version had an incredibly higher number of syscalls is
  due to the fact that it uses unbuffed I/O. Instead of using getchar and putchar, each
  byte examined requires 2 syscalls for the read and write. The buffered version stores
  the bytes in a buffer, which signficantly reduced the number of syscalls.

(b) Copying a file to the terminal:
$ strace -o strace_output3 ./tr2b 'AB' 'XY' < large.txt
$ wc -l strace_output3

- The number of syscalls was found to be 35 for tr2b

$ strace -o strace_output4 ./tr2u 'AB' 'XY' < large.txt 
$ wc -l strace_output4

- Lastly, for tr2u, the number of syscalls was found to be 10485790

- Again, the unbuffered version had signifcantly more syscalls. However, for copying a
  file to the terminal, there were slightly more syscalls than from copying the output
  to another file due to the fact that it requires a certain amount of syscalls to 
  print the output to the terminal (instead of just redirecting to a file)

(4) Finally, I ran the time command on both programs to measure their performances when
    copying the same amount of data:

(a) Copying one file to another:

$ time ./tr2b 'AB' 'XY' < large.txt > output1.txt

real   0m0.003s
user   0m0.000s
sys    0m0.001s

$ time ./tr2u 'AB' 'XY' < large.txt > output2.txt

real   0m6.362s
user   0m0.249s
sys    0m6.065s

(b) Copying a file to the terminal:

$ time ./tr2b 'AB' 'XY' < large.txt

real   0m0.002s
user   0m0.000s
sys    0m0.001s

$ time ./tr2u 'AB' 'XY' < large.txt

real   0m6.724s
user   0m0.285s
sys    0m6.505s

- Thus from both options, it is clear that tr2b is significantly faster than tr2u due to
  the fact that there are a lot less syscalls being made; and in addition, writing to
  the terminal is slightly slower than copying straight into a file
