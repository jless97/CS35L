//CS 35L - Professor Eggert
//Lab 4 - TA Isha Verma
//Project 7 - SSH setup and use in applications
//Homework
//hw.txt

Question 1:

Yes, the network is still secure. The reason for this is because when 
using ssh to create keys, two keys are created. The public key is the 
counterpart to the private key and can be revealed to others. Thus, if
the other teams had been observing our bytes, they would only have
access to the encrypted bytes. However, ssh key pairs also involve a 
private key, which is kept secret, and stored on the computer, and not
the remote machine. The private key is not transferred over the network,
and thus the other teams observing our bytes wouldn't be able to decrypt
the data being sent over the server.

(1)

The answer would not change if other teams had also tapped your keyboards, and
observed our team's keystrokes; the network would still be secure. The reason
is because when creating the key pairs, the private key is generated by the
random number generator and given random values. Thus, even if the other teams
have access to our keyboard strokes, it wouldn't help, as the private key is
still hidden, and generated randomly, and not linked to our keyboard input.

(2)

If the other teams had physical control of our USB temporarily from which
we booted off of, then the network would not be secure. The network isn't
necessarily secure because the other teams could potentially access to all of
the key pairs, including the public and private keys, which would allow them
to decrypt the data being sent over the server.

Question 2:

The gpg --verify command doesn't necessarily verify that someone personally
created the tar file because it only verifies that the detached signature 
matches that of the tar file. It doesn't actually verify who created the file,
and signed it because someone could potentially intercept the file being sent
across a server, and alter the data by untarring the original file, and sending
their own public key and change it so that they are the one sending the 
signature, retar the file, and send it. In this way, the person receiving the
file on the server would open it up, and see a signature from an imposter, and
not the person who actually created the tar file.

This verification problem can be solved by using a third party company to trust
with the verification process to keep track of the origin of the public key.
For example, a Certification Authority creates certificates which contain the
owner's name and signature, which would thus verify the origin and the person
who created the tar file, without being altered by an imposter.
