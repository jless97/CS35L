//CS 35L, Lab 4 - Software Construction Laboratory
//Name: Jason Less
//Student ID: 404-640-158

//Assignment 1. Getting to know your system
//key1.txt

Exercise 1.1: Moving around in Emacs

1. N/A
2. C-s I C Enter
3. C-s L a M-b
4. C-s s e l f M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. It can be more efficient by using C-s to do an incremental search and
   using M-b to move to the start of the word
9. No
10. C-x C-c y

Exercise 1.2: Deleting text in Emacs

1. N/A
2. M-g g 1 8 Enter C-k
3. C-s D E C-a C-k
4. C-s < ! - C-a M-k M-k
5. C-s < ! M-b M-f C-SP M-f C-u C-b C-w C-s < ! C-a C-k C-x C-c y

Exercise 1.3: Inserting text in Emacs

1. N/A
2. C-s SP 1 Enter Backspace 3 7 C-s SP 1 Enter Backspace 3 7
3. M-< C-s U T Enter C-b C-SP M-f C-f C-f C-w S - A S C I I
4. M-< C-s / o Enter C-a C-o
5. C-x C-c y
d i f f - u e x e r 1 . h t m l SP e x e r 3 . h t m l SP >e x e r 3 . d i f f

Exercise 1.4: Other editing tasks in Emacs

1. $ c a t e x e r 2 . h t m l SP e x e r 2 . d i f f SP >e x e r 4 . h t m l
2. N/A
3. M-> C-r < Enter C-SP C-e M-w M-g g 3 5 3 Enter C-y
4. C-s < ! Enter C-b C-b C-SP C-e M-w M-g g 1 8 Enter C-y
   M-> C-r Y Enter C-a C-f C-SP C-e C-n C-n M-w M-g g 3 0 3 Enter C-y
   M-> C-r D Enter C-a C-f C-SP C-e M-w M-g g 9 3 Enter C-y
   M-> C-r > . Enter M-b M-f C-SP M-f C-u C-b M-w M-g g 3 4 0 Enter C-e M-b
   	M-b M-f C-y
5. M-< C-s : 3 Enter C-a C-SP M-> C-w
6. C-x u
7. M-> C-r : 3 Enter C-a C-o C-n < ! - - M-> - - >
8. M-< M-x r e p l a c e - s t r i n g Enter < o l > Enter < O l > Enter 
   C-x C-c y
9. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > 
   e x e r 4 . d i f f
   (There were 7 instances)

Exercise 1.5: Doing commands in Emacs

1. C-x d Enter + j u n k Enter
2. C-x C-f j u n k / h e l l o . c
3. M-x c o m p i l e Enter h e l l o y
4. M-x c o m p i l e Enter ./hello -o hello-out Enter
5.
-*- mode: compilation; default-directory: "~/" -*-
Compilation started at Fri Jan 13 23:21:59

make -k ./hello -o hello-out
make: 'hello' is up to date.

#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  
  char n = '%cn';%c char b = '%c%c';%c  char q = '%c';%c  
  char const *p = %c%s%c;%c  
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  
  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Fri Jan 13 23:21:59

Exercises 1.6: Running Elisp code

1. C-x b * s c r a t c h * Enter
2. ( r a n d o m ) C-j
3. ( s e t q SP x SP ( r a n d o m ) ) C-j 
   ( s e t q SP y SP ( r a n d o m ) ) C-j 
4. ( * x y) C-j 
   Product: 1836898378402715572
   No, it isn’t the correct result
5. M-: ( * x y) Enter
   Output: 1836898378402715572 (#o145757625370513653664, #x197df957c52f57b4)
   The product was the same as in 1.6.4. However, there is now two 
   values to the right of the product separated by a comma and in parentheses.
6. In a mathematical sense, the two numbers are not random. The numbers 
   generated are not random because for one, they are always of the same 
   length (i.e. number of digits) despite being positive or negative, or the 
   operands or product. In addition, computer programs can’t realistically 
   generate true random numbers, and in contrast, generate pseudo-random 
   numbers. Moreover, these pseudo-random numbers are generated based off of 
   an initial seed value.
7. If (random) is truly random, then the probability that the product will be
   mathematically incorrect is 50%. This is because in some cases, the numbers
   generated will be small enough so that the product can be evaluated 
   correctly. In other cases, the numbers will be too large, and this would 
   lead to overflow, and hence an incorrect answer.





