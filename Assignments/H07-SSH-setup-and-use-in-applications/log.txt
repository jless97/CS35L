//CS 35L - Professor Eggert
//Lab 4 - TA Isha Verma
//Project 7 - SSH setup and use in applications
//Laboratory
//log.txt

- Instead of doing this in the SEASNET Lab on the SEASNET computers, I decided
  to do this project from my home computer. To do this, I created a bootable
  Ubuntu USB via the following steps:
  1. Inserted USB into the USB Port, and opened up Disk Utility:
     a. Once in Disk Utility, I scrolled to my USB on the left-side tool bar
     	and clicked erase (to free up all memory on the USB)
  2. Next, I went to the Ubuntu website, and downloaded the Ubuntu 16.10 
     Desktop ISO image
  3. I then opened up Mac Linux USB Loader app to create the bootable Ubuntu 
     USB:
  4. Finally, I restarted my computer, while holding down the Alt/Option key
     in order to be able to boot from the USB (Ubuntu)

- Now, that I am in the Ubuntu OS, I began the lab (my partner did the same
  method to use Ubuntu from the home computer, as we both have macs). We both 
  did this lab together in the same room to make sure that everything was 
  working properly

- In terminal, I installed the openssh server to begin:

$ sudo apt-get install openssh-server

- Next, I generated an authentication key for ssh, when acting as the server
  to my partner, who would be the client

$ ssh-keygen

- I set the password to the name of my partner (i.e. Jacob)

- Next, I created a new user to set up a client for when they access the 
  server, and to create the client's home directory 

$ sudo useradd -d /home/jacob -m jacob

- I then set the password for the client

$ sudo passwd jacob

- And then navigated to the recently created directory to set up the 
  appropriate permissions

$ cd/home/jacob

- I then created an ssh directory for the client, and then changed my client
  to be the owner 

$ sudo mkdir .ssh
$ sudo chown -R jacob .ssh

- Next, I changed the permissions to give the client access to login

$ sudo chmod 700 .ssh

- Lastly, before acting as the client, I retrieved my IP addres to give the
  client access to my server

$ ifconfig

- IP Address: 172.30.1.251

- Now, I have set up my server, and my partner has set up his server in the
  exactly the same way. I will now serve as the client and login to my 
  partner's server (as he does the same operation)

- I began by authorizing my key to be able to login remotely to my partner's
  server (using the IP Address retrieved using ifconfig)

$ ssh-copy-id -i jason@172.30.49.155

- I then made it so that I can login in the future without having to type in
  a password each time

$ ssh-add

- Now that everything is setup, I go ahead and login to my partner's server

$ ssh jason@172.30.49.155

- At this point, we both have access to each other's servers, so we do two
  things to verify that everything is working properly:
  1. We each create a file on each other's server to make sure that we both
     can see the changes (I create test.txt, my partner creates test1.txt)
     $ touch test.txt
     - We both were able to see the changes, so this worked
  2. We then use port forwarding, which allows us to run a command remotely
     on my partner's server (and my partner does the same)
     $ ssh -X jason@172.30.49.155
     $ xterm
     - A shell window popped up on both of our server's

- Thus, trusted connections were established using openssh, and everything 
  worked as it was expected
